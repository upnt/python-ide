[[plugins]]
repo = 'sickill/vim-monokai'
hook_add = '''
colorscheme monokai
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
call my_deol#options()
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['denite-git']
hook_add = '''
augroup My_Denite
    au!
    au FileType denite call my_denite#settings()
    au vimenter * call my_denite#openings()
augroup END
'''

[[plugins]]
repo = 'neoclide/denite-git'
hook_add = '''
augroup My_Denite_Git
    au!
    au vimenter * call my_denite_git#openings()
augroup END
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-icons', 'defx-git']
hook_add = '''
call my_defx#options()
augroup My_Defx
    au!
    au FileType defx call my_defx#settings()

if argc()==0 || argc()==1 && isdirectory(argv()[0])
    au vimenter * Defx
endif
augroup END
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = "kristijanhusak/defx-git"

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
call my_lightline#options()
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
depands = ['neosnippet.vim', 'deoplete-lsp']
hook_source = '''
call my_neosnippet#settings()
let g:deoplete#enable_at_startup = 1
" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]
repo = 'Shougo/deoplete-lsp'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# python setting
[[plugins]]
repo = 'neovim/nvim-lsp'
hook_post_source = '''
let settings = {
          \   "pyls" : {
          \     "enable" : v:true,
          \     "trace" : { "server" : "verbose", },
          \     "commandPath" : "",
          \     "configurationSources" : [ "pycodestyle" ],
          \     "plugins" : {
          \       "jedi_completion" : { "enabled" : v:true, },
          \       "jedi_hover" : { "enabled" : v:true, },
          \       "jedi_references" : { "enabled" : v:true, },
          \       "jedi_signature_help" : { "enabled" : v:true, },
          \       "jedi_symbols" : {
          \         "enabled" : v:true,
          \         "all_scopes" : v:true,
          \       },
          \       "mccabe" : {
          \         "enabled" : v:true,
          \         "threshold" : 15,
          \       },
          \       "preload" : { "enabled" : v:true, },
          \       "pycodestyle" : { "enabled" : v:true, },
          \       "pydocstyle" : {
          \         "enabled" : v:false,
          \         "match" : "(?!test_).*\\.py",
          \         "matchDir" : "[^\\.].*",
          \       },
          \       "pyflakes" : { "enabled" : v:true, },
          \       "rope_completion" : { "enabled" : v:true, },
          \       "yapf" : { "enabled" : v:true, },
          \     }}}
call nvim_lsp#setup("pyls", settings)

nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
'''


[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
let g:syntastic_python_checkers = ["flake8"]
'''
